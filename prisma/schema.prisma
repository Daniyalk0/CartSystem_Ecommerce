generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  password       String?   // ✅ Required for credentials-based login
  image          String?
  role           String   @default("customer") // 'admin' or 'customer'
  
  // Relations
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  price       Int
  description String
  category    String
  imageUrl    String
  createdAt   DateTime @default(now())
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     Json
  total     Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

// ✅ Required by NextAuth for OAuth support
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// ✅ Required by NextAuth for database session strategy
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

// ✅ Required if you ever use email verification or forgot password
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
